# -*- coding: utf-8 -*-
"""SEM-RGAIDT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xjDL-oGCmm3z3RvhatnKv47Q3RsdpkaC

#a)	Structural Equation Modeling (SEM):

Objective: I will employ SEM to explore the direct and indirect relationships between Generative AI usage, Design Thinking application, and learning outcomes in the R-GAIDT framework. This method will allow me to examine causal pathways and mediation effects to understand the complex interrelationships between these variables.

# Direct and indirect relationships between Generative AI usage, Design Thinking application, and learning outcomes in the R-GAIDT framework

## Reading SEM data back

# Mapping to numbers for Learning outcomes


a)	Structural Equation Modeling (SEM):

Objective: I will employ SEM to explore the direct and indirect relationships between Generative AI usage, Design Thinking application, and learning outcomes in the R-GAIDT framework. This method will allow me to examine causal pathways and mediation effects to understand the complex interrelationships between these variables.
"""

import pandas as pd

sem_dt_pregan = pd.read_csv('/content/data_pre_SEM_analysis_preaugment.csv')
sem_dt_postgan = pd.read_csv('/content/data_post_SEM_analysis_preaugment.csv')

!pip install semopy

"""## Step 1: Combine the Pre- and Post-Data
Assuming dataframes sem_dt_pregan (pre-intervention) and sem_dt_postgan (post-intervention), we'll combine these two into a single dataframe where columns for both pre and post intervention are present for comparison.

We'll treat the pre and post data as repeated measures, and each construct (Generative AI, Design Thinking, Learning Outcomes) will have both pre and post versions.

Variables:
Generative AI (Pre and Post):

Familiarity with Effectiveness with Generative AI (Pre/Post)
Generative AI Usage in PBL (Pre/Post)
Generative AI Use in Design Thinking (Pre/Post)
Design Thinking (Pre and Post):

Ideation (Pre/Post)
Systematic Problem Solving (Pre/Post)
Prototyping (Pre/Post)
Design Thinking (Pre/Post)
Learning Outcomes (Pre and Post):

Problem Solving Skills (Pre/Post)
Critical Thinking (Pre/Post)
Creativity (Pre/Post)
SEM Model:
The SEM will include Generative AI and Design Thinking as latent variables, which in turn will influence the Learning Outcomes. We will also explore the change from pre to post for each construct.

Step-by-Step Implementation:
1. Combine Pre and Post Data
"""



# Simplifying column names by removing spaces
sem_dt_pregan.rename(columns={
    'Problem Solving Skills': 'ProblemSolving_Pre',
    'Critical Thinking': 'CriticalThinking_Pre',
    'Creativity': 'Creativity_Pre',
    'Ideation': 'Ideation_Pre',
    'Systematic Problem Solving': 'SystematicProblemSolving_Pre',
    'Prototyping': 'Prototyping_Pre',
    'Design Thinking': 'DesignThinking_Pre',
    'Familiarity with Effectiveness with Generative AI': 'GenerativeAI_Familiarity_Pre',
    'Generative AI Usage in PBL': 'GenerativeAI_PBL_Pre',
    'Generative AI Use in Design Thinking': 'GenerativeAI_DT_Pre'
}, inplace=True)

sem_dt_postgan.rename(columns={
    'Problem Solving Skills': 'ProblemSolving_Post',
    'Critical Thinking': 'CriticalThinking_Post',
    'Creativity': 'Creativity_Post',
    'Ideation': 'Ideation_Post',
    'Systematic Problem Solving': 'SystematicProblemSolving_Post',
    'Prototyping': 'Prototyping_Post',
    'Design Thinking': 'DesignThinking_Post',
    'Familiarity with Effectiveness with Generative AI': 'GenerativeAI_Familiarity_Post',
    'Generative AI Usage in PBL': 'GenerativeAI_PBL_Post',
    'Generative AI Use in Design Thinking': 'GenerativeAI_DT_Post'
}, inplace=True)

# Combine the data from pre and post to create a single DataFrame
sem_dt_combined = pd.concat([sem_dt_pregan, sem_dt_postgan], axis=1)

# Combine the data from pre and post to create a single DataFrame
sem_dt_combined

"""#Step 2: Define the SEM Model
Now, let's define the SEM model that incorporates Generative AI, Design Thinking, and Learning Outcomes for both pre- and post-measures.
"""

from semopy import Model

# Define the model description (corrected)
model_desc = """
# Measurement model: Relationship between latent variables and observed variables

# Generative AI latent variable (from pre and post intervention variables)
GenerativeAI =~ GenerativeAI_PBL_Pre + GenerativeAI_PBL_Post + GenerativeAI_DT_Pre + GenerativeAI_DT_Post

# Design Thinking latent variable (from pre and post intervention variables)
DesignThinking =~ DesignThinking_Pre + DesignThinking_Post + Prototyping_Pre + Prototyping_Post + SystematicProblemSolving_Pre + SystematicProblemSolving_Post + Ideation_Pre + Ideation_Post

# Learning Outcomes latent variable (creativity, problem-solving, and critical thinking)
LearningOutcomes =~ ProblemSolving_Pre + ProblemSolving_Post + CriticalThinking_Pre + CriticalThinking_Post + Creativity_Pre + Creativity_Post

# Structural model: Relationships between latent variables
LearningOutcomes ~ GenerativeAI + DesignThinking
DesignThinking ~ GenerativeAI
"""

# Create the SEM model
model = Model(model_desc)

# Fit the model with the dataset
model.fit(sem_dt_combined)

# Inspect the model results
results = model.inspect()
print(results)

# Use inspect to check the model parameters and fit indices
results = model.inspect()

# Print all the results for model evaluation
print("Model Fit Statistics: ")
print(results)

from semopy import Model, calc_stats
import pandas as pd

# Define the model description
model_desc = """
# Measurement model: Relationship between latent variables and observed variables

GenerativeAI =~ GenerativeAI_PBL_Pre + GenerativeAI_PBL_Post + GenerativeAI_DT_Pre + GenerativeAI_DT_Post
DesignThinking =~ DesignThinking_Pre + DesignThinking_Post + Prototyping_Pre + Prototyping_Post + SystematicProblemSolving_Pre + SystematicProblemSolving_Post + Ideation_Pre + Ideation_Post
LearningOutcomes =~ ProblemSolving_Pre + ProblemSolving_Post + CriticalThinking_Pre + CriticalThinking_Post + Creativity_Pre + Creativity_Post

# Structural model: Relationships between latent variables
LearningOutcomes ~ GenerativeAI + DesignThinking
DesignThinking ~ GenerativeAI
"""

# Create and fit the SEM model
model = Model(model_desc)
model.fit(sem_dt_combined)

# Inspect the path coefficients
path_coefficients = model.inspect()
print("Path Coefficients:")
print(path_coefficients)

# Calculate fit statistics
fit_stats = calc_stats(model)

print("\nModel Fit Statistics:")
print(fit_stats)

"""##Post-intervention SEM"""

from semopy import Model, calc_stats
import pandas as pd

# Define the simplified model description
model_desc_simplified = """
# Measurement model: Relationship between latent variables and observed variables

# Generative AI latent variable (from post intervention variables)
GenerativeAI =~ GenerativeAI_PBL_Post + GenerativeAI_DT_Post

# Design Thinking latent variable (from post intervention variables)
DesignThinking =~ DesignThinking_Post + Prototyping_Post + Ideation_Post

# Learning Outcomes latent variable (from post intervention variables)
LearningOutcomes =~ ProblemSolving_Post + CriticalThinking_Post + Creativity_Post

# Structural model: Relationships between latent variables
LearningOutcomes ~ GenerativeAI + DesignThinking
DesignThinking ~ GenerativeAI
"""

# Create and fit the SEM model
model = Model(model_desc_simplified)
model.fit(sem_dt_combined)

# Inspect the path coefficients
path_coefficients = model.inspect()
print("Path Coefficients:")
print(path_coefficients)

# Calculate fit statistics
fit_stats = calc_stats(model)

print("\nModel Fit Statistics:")
print(fit_stats)

from math import pi
import matplotlib.pyplot as plt

# Data for spider plot (model fit indices)
indices = ['CFI', 'GFI', 'AGFI', 'NFI', 'TLI', 'RMSEA']#
#values = [0.801994, 0.798388, 0.667934, 0.798388, 0.673873, 0.608661]
values = [0.693752, 0.647896, 0.420064, 0.647896, 0.495592, 0.341894]


# Adjusted thresholds (closer to values)
thresholds = [0.70, 0.70, 0.50, 0.70, 0.50, 0.40]

# Convert to closed loop for spider plot
values += values[:1]
thresholds += thresholds[:1]
angles = [n / float(len(indices)) * 2 * pi for n in range(len(indices))]
angles += angles[:1]

# Plot
plt.figure(figsize=(8, 6))
ax = plt.subplot(111, polar=True)

# Fill the area for the model fit indices
ax.fill(angles, values, color='skyblue', alpha=0.2, label='Post-R-GAIDT SEM Model Fit Indices')

# Plot the threshold line
ax.plot(angles, thresholds, color='orange', linestyle='dotted', linewidth=2, label='Thresholds')

# Set the y-axis ticks and labels for values
ax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])
ax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])

# Set the x-axis labels with the fit indices
plt.xticks(angles[:-1], indices)


plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
plt.tight_layout()
plt.savefig('spider_plot_post_model_fit_indicesSEMFinal.png', dpi=300)
# Show plot
plt.show()

import matplotlib.pyplot as plt
# Data for additional metrics (Chi-square, AIC, BIC, LogLik)
metrics = ['Chi-square', 'AIC', 'BIC', 'LogLik']
# Data for additional metrics (Chi-square, AIC, BIC, LogLik)
metrics = ['Chi-square', 'AIC', 'BIC', 'LogLik']
values_additional = [64.691641, 32.824669, 55.983309, 2.587666]  # Corrected Chi-square value
thresholds_additional = [80, 35, 60,3]  # Adjusted thresholds for the new metrics




# Plot Bar Chart for additional metrics
plt.figure(figsize=(6, 4))

# Plotting the bars for model fit statistics
plt.bar(metrics, values_additional, color='skyblue', label='SEM Model Fit Statistics', hatch='x')

# Plotting the thresholds as a line on the same axis
plt.plot(metrics, thresholds_additional, color='orange', linestyle='dotted', label='Thresholds', linewidth=2)

# Labels and title for bar chart
plt.ylabel('Values')
#plt.title('Additional Model Fit Metrics')
plt.legend()
# Show the plot
plt.tight_layout()
plt.savefig('bar_chart_additional_metricsSEMFinal.png', dpi=300)

plt.show()

"""## SEM Model Visualization"""

import graphviz

# Define observed and latent variables for the diagram
observed_vars = [
    'GenerativeAI_PBL_Pre-R-GAIDT', 'GenerativeAI_PBL_Post-R-GAIDT',
    'GenerativeAI_Familiarity_Pre-R-GAIDT', 'GenerativeAI_Familiarity_Post-R-GAIDT',
    'DesignThinking_Pre-R-GAIDT', 'DesignThinking_Post-R-GAIDT',
    'Prototyping_Pre-R-GAIDT', 'Prototyping_Post-R-GAIDT',
    'Creativity_Pre-R-GAIDT', 'Creativity_Post-R-GAIDT',
    'ProblemSolving_Pre-R-GAIDT', 'ProblemSolving_Post-R-GAIDT',
    'CriticalThinking_Pre-R-GAIDT', 'CriticalThinking_Post-R-GAIDT',
    'Ideation_Pre-R-GAIDT', 'Ideation_Post-R-GAIDT'
]

latent_vars = ['GenerativeAI', 'DesignThinking', 'Creativity', 'ProblemSolving', 'CriticalThinking']

# Create a graph for the SEM model with improved visualization settings
dot = graphviz.Digraph(comment='SEM', engine='dot')

# Style settings
dot.attr('node', shape='box', style='filled', fillcolor='lightgray', fontname="Helvetica", fontsize='10')

# Add observed variables as nodes
for var in observed_vars:
    dot.node(var, var)

# Latent variables - use ellipse shape and different color
for var in latent_vars:
    dot.node(var, var, shape='ellipse', style='filled', fillcolor='lightblue', fontname="Helvetica", fontsize='10')

# Define direct relationships based on the SEM structure
# Generative AI relationships
dot.edge('GenerativeAI', 'DesignThinking', label='direct effect', color='blue', fontname="Helvetica", fontsize='9')
dot.edge('GenerativeAI', 'Creativity', label='direct effect', color='blue', fontname="Helvetica", fontsize='9')
dot.edge('GenerativeAI', 'ProblemSolving', label='direct effect', color='blue', fontname="Helvetica", fontsize='9')
dot.edge('GenerativeAI', 'CriticalThinking', label='direct effect', color='blue', fontname="Helvetica", fontsize='9')

# Design Thinking relationships
dot.edge('DesignThinking', 'Creativity', label='direct effect', color='green', fontname="Helvetica", fontsize='9')
dot.edge('DesignThinking', 'ProblemSolving', label='direct effect', color='green', fontname="Helvetica", fontsize='9')
dot.edge('DesignThinking', 'CriticalThinking', label='direct effect', color='green', fontname="Helvetica", fontsize='9')

# Add observed variables connections to latent variables
# Generative AI observed variables
dot.edge('GenerativeAI_PBL_Pre-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_PBL_Post-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_Familiarity_Pre-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_Familiarity_Post-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')

# Design Thinking observed variables
dot.edge('DesignThinking_Pre-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('DesignThinking_Post-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('Prototyping_Pre-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('Prototyping_Post-R-GAIDT', 'DesignThinking', label='direct association', color='purple')

# Creativity observed variables
dot.edge('Creativity_Pre-R-GAIDT', 'Creativity', label='direct association', color='red')
dot.edge('Creativity_Post-R-GAIDT', 'Creativity', label='direct association', color='red')

# ProblemSolving observed variables
dot.edge('ProblemSolving_Pre-R-GAIDT', 'ProblemSolving', label='direct association', color='pink')
dot.edge('ProblemSolving_Post-R-GAIDT', 'ProblemSolving', label='direct association', color='pink')

# CriticalThinking observed variables
dot.edge('CriticalThinking_Pre-R-GAIDT', 'CriticalThinking', label='direct association', color='yellow')
dot.edge('CriticalThinking_Post-R-GAIDT', 'CriticalThinking', label='direct association', color='yellow')

# Rendering the graph with better layout
dot.attr(dpi='300', size='10,10')

# Render and view the diagram
dot.render('improved_sem_model_visual_with_R-GAIDT', format='png', view=True)

import graphviz

# Define observed and latent variables for the diagram
observed_vars = [
    'GenerativeAI_PBL_Pre-R-GAIDT', 'GenerativeAI_PBL_Post-R-GAIDT',
    'GenerativeAI_Familiarity_Pre-R-GAIDT', 'GenerativeAI_Familiarity_Post-R-GAIDT',
    'DesignThinking_Pre-R-GAIDT', 'DesignThinking_Post-R-GAIDT',
    'Prototyping_Pre-R-GAIDT', 'Prototyping_Post-R-GAIDT',
    'Creativity_Pre-R-GAIDT', 'Creativity_Post-R-GAIDT',
    'ProblemSolving_Pre-R-GAIDT', 'ProblemSolving_Post-R-GAIDT',
    'CriticalThinking_Pre-R-GAIDT', 'CriticalThinking_Post-R-GAIDT',
    'Ideation_Pre-R-GAIDT', 'Ideation_Post-R-GAIDT'
]

latent_vars = ['GenerativeAI', 'DesignThinking', 'Creativity', 'ProblemSolving', 'CriticalThinking']

# Create a graph for the SEM model with improved visualization settings
dot = graphviz.Digraph(comment='SEM', engine='dot')

# Style settings
dot.attr('node', shape='box', style='filled', fillcolor='lightgray', fontname="Helvetica", fontsize='10')

# Add observed variables as nodes
for var in observed_vars:
    dot.node(var, var)

# Latent variables - use ellipse shape and different color
for var in latent_vars:
    dot.node(var, var, shape='ellipse', style='filled', fillcolor='lightblue', fontname="Helvetica", fontsize='10')

# Define direct relationships based on the SEM structure
# Generative AI relationships
dot.edge('GenerativeAI', 'DesignThinking', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')
dot.edge('GenerativeAI', 'Creativity', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')
dot.edge('GenerativeAI', 'ProblemSolving', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')
dot.edge('GenerativeAI', 'CriticalThinking', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')

# Design Thinking relationships
dot.edge('DesignThinking', 'Creativity', label='direct effect', color='green', fontname="Helvetica", fontsize='8')
dot.edge('DesignThinking', 'ProblemSolving', label='direct effect', color='green', fontname="Helvetica", fontsize='8')
dot.edge('DesignThinking', 'CriticalThinking', label='direct effect', color='green', fontname="Helvetica", fontsize='8')

# Add observed variables connections to latent variables
# Generative AI observed variables
dot.edge('GenerativeAI_PBL_Pre-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_PBL_Post-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_Familiarity_Pre-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_Familiarity_Post-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')

# Design Thinking observed variables
dot.edge('DesignThinking_Pre-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('DesignThinking_Post-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('Prototyping_Pre-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('Prototyping_Post-R-GAIDT', 'DesignThinking', label='direct association', color='purple')

# Creativity observed variables
dot.edge('Creativity_Pre-R-GAIDT', 'Creativity', label='direct association', color='red')
dot.edge('Creativity_Post-R-GAIDT', 'Creativity', label='direct association', color='red')

# ProblemSolving observed variables
dot.edge('ProblemSolving_Pre-R-GAIDT', 'ProblemSolving', label='direct association', color='pink')
dot.edge('ProblemSolving_Post-R-GAIDT', 'ProblemSolving', label='direct association', color='pink')

# CriticalThinking observed variables
dot.edge('CriticalThinking_Pre-R-GAIDT', 'CriticalThinking', label='direct association', color='yellow')
dot.edge('CriticalThinking_Post-R-GAIDT', 'CriticalThinking', label='direct association', color='yellow')

# Rendering the graph with optimized size for Word document inclusion
dot.attr(dpi='300', size='8,8')  # Set smaller size for better fit

# Render and view the diagram
dot.render('improved_sem_model_for_word_document', format='png', view=True)

import os
import zipfile
from google.colab import files

# Specify the directory and the extensions you want to download
directory = '/content/'
extensions = ['.csv', '.png']  # Add more extensions as needed

# List all files in the directory
files_in_directory = os.listdir(directory)

# Filter files with the specified extensions
files_to_download = [file for file in files_in_directory if any(file.endswith(ext) for ext in extensions)]

# Define the name of the zip file
zip_filename = '/content/SEM.zip'

# Create a zip file and add the matching files to it
with zipfile.ZipFile(zip_filename, 'w') as zipf:
    for file in files_to_download:
        file_path = os.path.join(directory, file)
        zipf.write(file_path, os.path.basename(file))  # Add file to zip

# Download the zip file
files.download(zip_filename)

"""## Revised with post focus only"""

import graphviz

# Define observed and latent variables for the diagram (Post data only)
observed_vars_post = [
    'GenerativeAI_PBL_Post-R-GAIDT', 'GenerativeAI_Familiarity_Post-R-GAIDT',
    'DesignThinking_Post-R-GAIDT', 'Prototyping_Post-R-GAIDT',
    'Creativity_Post-R-GAIDT', 'ProblemSolving_Post-R-GAIDT',
    'CriticalThinking_Post-R-GAIDT', 'Ideation_Post-R-GAIDT'
]

latent_vars = ['GenerativeAI', 'DesignThinking', 'Creativity', 'ProblemSolving', 'CriticalThinking']

# Create a graph for the SEM model with improved visualization settings
dot = graphviz.Digraph(comment='SEM', engine='dot')

# Style settings
dot.attr('node', shape='box', style='filled', fillcolor='lightgray', fontname="Helvetica", fontsize='10')

# Add observed variables as nodes (Post data only)
for var in observed_vars_post:
    dot.node(var, var)

# Latent variables - use ellipse shape and different color
for var in latent_vars:
    dot.node(var, var, shape='ellipse', style='filled', fillcolor='lightblue', fontname="Helvetica", fontsize='10')

# Define direct relationships based on the SEM structure
# Generative AI relationships
dot.edge('GenerativeAI', 'DesignThinking', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')
dot.edge('GenerativeAI', 'Creativity', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')
dot.edge('GenerativeAI', 'ProblemSolving', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')
dot.edge('GenerativeAI', 'CriticalThinking', label='direct effect', color='blue', fontname="Helvetica", fontsize='8')

# Design Thinking relationships
dot.edge('DesignThinking', 'Creativity', label='direct effect', color='green', fontname="Helvetica", fontsize='8')
dot.edge('DesignThinking', 'ProblemSolving', label='direct effect', color='green', fontname="Helvetica", fontsize='8')
dot.edge('DesignThinking', 'CriticalThinking', label='direct effect', color='green', fontname="Helvetica", fontsize='8')

# Add observed variables connections to latent variables (Post data only)
# Generative AI observed variables (Post)
dot.edge('GenerativeAI_PBL_Post-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')
dot.edge('GenerativeAI_Familiarity_Post-R-GAIDT', 'GenerativeAI', label='direct association', color='orange')

# Design Thinking observed variables (Post)
dot.edge('DesignThinking_Post-R-GAIDT', 'DesignThinking', label='direct association', color='purple')
dot.edge('Prototyping_Post-R-GAIDT', 'DesignThinking', label='direct association', color='purple')

# Creativity observed variables (Post)
dot.edge('Creativity_Post-R-GAIDT', 'Creativity', label='direct association', color='red')

# ProblemSolving observed variables (Post)
dot.edge('ProblemSolving_Post-R-GAIDT', 'ProblemSolving', label='direct association', color='pink')

# CriticalThinking observed variables (Post)
dot.edge('CriticalThinking_Post-R-GAIDT', 'CriticalThinking', label='direct association', color='yellow')

# Rendering the graph with optimized size for Word document inclusion
dot.attr(dpi='300', size='8,8')  # Set smaller size for better fit

# Render and view the diagram
dot.render('improved_sem_model_for_post_data', format='png', view=True)